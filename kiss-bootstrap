#!/bin/ash -e

log() {
    printf '\033[32m->\033[m %s.\n' "$*"
}

die() {
    log "$*" >&2
    exit 1
}

. ./build.cfg

download() {
    log Downloading kernel, filesystem and chroot components; {
        wget -q -nc ${KISS_ROOT} || exit 1
        wget -q -nc ${KISS_CHROOT} || exit 1
        wget -q -nc ${KERNEL_PACKAGE} || exit 1
        chmod +x ${CHROOT_CMD}
    }
}

cleanup() {
    log Cleanup everything; {
		qemu-nbd -d ${NBD_DEV} 1>/dev/null || true
		umount -f ${TARGET_DIR} || true
		rm -rf ${CHROOT_DIR}
		rm -rf ${TARGET_DIR}
		rm -rf ${KERNEL_DIR}
		rm -f ${VAGRANT_IMAGE}
		rm -f box.img
        exit 0
    }
}

prepare() {
    log Prepare directoriess; {
        mkdir ${TARGET_DIR} 2> /dev/null || true
        mkdir ${KERNEL_DIR} 2> /dev/null || true
        mkdir ${CHROOT_DIR} 2> /dev/null || true
    }

    log Extract kernel sources; {
        tar -xf ${KERNEL_VERSION}.tar.xz -C ${KERNEL_DIR}/
    }
}

chroot_exec() {
    echo "$1 3>&-" | "${CHROOT_CMD}" "${2}" >/dev/null
}

setup_kiss_chroot() {
    log Extract root filesystem; {
        tar -xf kiss-chroot.tar.xz -C ${CHROOT_DIR} --strip-components 1
    }

    log Build kernel; {
        make -C ${KERNEL_DIR}/${KERNEL_VERSION}/ defconfig 1>/dev/null
        make -C ${KERNEL_DIR}/${KERNEL_VERSION}/ -j "$(nproc)" 1>/dev/null
    }

    log Install kernel; {
        make -C ${KERNEL_DIR}/${KERNEL_VERSION} modules_install INSTALL_PATH=../../${CHROOT_DIR} 1>/dev/null
        make -C ${KERNEL_DIR}/${KERNEL_VERSION} install INSTALL_PATH=../../${CHROOT_DIR}/boot/ 1>/dev/null
    }

    log Building base packages; {
        chroot_exec "yes | kiss build ${BASE_PACKAGES}" ${CHROOT_DIR}
    }

    log Building packages; {
        chroot_exec "yes | kiss build ${PACKAGES}"  ${CHROOT_DIR}
    }

    log Installing packages; {
        chroot_exec "yes | kiss install ${PACKAGES}" ${CHROOT_DIR}
    }

    log Enabling services; {
        for SERVICE in $SERVICES; do
            chroot_exec "ln -s /etc/sv/${SERVICE} /var/service/${SERVICE}" ${CHROOT_DIR}
        done
    }

    log Execute vagrant setup script; {
        cat ${VAGRANT_SETUP_SCRIPT} | ${CHROOT_CMD} ${CHROOT_DIR}
    }
}

create_qemu_image() {
    log Create qemu image;  {
        rm -f ${QCOW_FILE}
        qemu-img create -f qcow2 ${QCOW_FILE} ${QCOW_SIZE}
    }

    log Create NBD Device; {
        qemu-nbd -c ${NBD_DEV} ${QCOW_FILE} || exit 1
    }

    log Create partitions and format NBD Device; {
        parted ${NBD_DEV} --script mklabel msdos
        parted ${NBD_DEV} -a optimal  --script mkpart primary linux-swap 1M ${SWAPFS_SIZE}
        parted ${NBD_DEV} -a optimal  --script mkpart primary ext4 ${SWAPFS_SIZE} 100%
        mkswap ${NBD_DEV}p1
        mkfs.ext4 ${NBD_DEV}p2
    }

    log Mount NBD device to target directory; {
        mount ${NBD_DEV}p2 ${TARGET_DIR}
    }

    log Copy files from chroot to NBD device; {
        find ${CHROOT_DIR}/boot -name '*.old' -exec rm -f \{\} \;
        rsync -a --exclude "root/.cache" ${CHROOT_DIR}/* ${TARGET_DIR}/
    }

    log Setup bootloader; {
        chroot_exec "grub-install --target=i386-pc ${NBD_DEV}"  ${TARGET_DIR}
        chroot_exec "grub-mkconfig -o /boot/grub/grub.cfg" ${TARGET_DIR}
        sed -i 's/nbd0p2/sda2/g' ${TARGET_DIR}/boot/grub/grub.cfg
    }

    log Setup swap space; {
        echo "/dev/sda1     none    swap    sw 0 0" >> ${TARGET_DIR}/etc/fstab
    }

    log Setup username and password; {
        chroot_exec "adduser -D ${USER}" ${TARGET_DIR}
        chroot_exec "echo ${USER}:${PASSWORD} | chpasswd kiss" ${TARGET_DIR}
    }

    log Umount; {
        umount ${TARGET_DIR}
        qemu-nbd -d ${NBD_DEV}
    }
}

create_vagrant_image() {
    log Creating vagrant image; {
        rm -f ${VAGRANT_IMAGE}
        rm -f box.img
        cp ${QCOW_FILE} box.img
        tar cvzf ${VAGRANT_IMAGE} ${VAGRANT_METADATA} ${VAGRANT_FILE} ./box.img
    }
}

usage() {
    echo "$(basename "$0") --build=[all|download|prepare|chroot|qemu|vagrant]"
    echo "  all: complete build of chroot/qemu/vagrant image"
    echo "  download: download needed components"
    echo "  prepare: extract archives, create folders"
    echo "  chroot: build kiss environment in chroot"
    echo "  qemu: turn chroot into bootable qemu image"
    echo "  vagrant: build vagrant box image"
    echo ""
    echo "$(basename "$0") --cleanup"
    echo "  cleanup: clean everything up"
}

main() {
    [ "$(id -u)" = 0 ] || die Script needs to be run as root
    command -v qemu-nbd >/dev/null || die Needs qemu utils installed
    command -v wget >/dev/null || die Needs wget installed
    modprobe nbd || die Needs NBD module

	opts=$(getopt \
	    --longoptions "build:,help,cleanup" \
	    --name "$(basename "$0")" \
	    --options "" \
	    -- "$@"
	)

	eval set --"$opts"

	while [ $# -gt 0 ]; do
	    case "$1" in
		    --help)
                usage
                exit 0
			;;
            --cleanup)
                cleanup
			;;
            --build)
                action=$2
                shift 2
            ;;
	        *)
                break
            ;;
	    esac
	done

	case "$action" in
        all)
            download
            prepare
            setup_kiss_chroot
            create_qemu_image
            create_vagrant_image
        ;;
        prepare)
            prepare
        ;;
        download)
            download
        ;;
		chroot)
			setup_kiss_chroot
		;;
		qemu)
			create_qemu_image
		;;
		vagrant)
			create_vagrant_image
		;;
	esac
}

main "$*"
